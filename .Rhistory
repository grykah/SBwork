df <- subset(df, select = -c(`symptom_onset_date`, `confirmed_date`, `released_date`, `deceased_date`))
nunique(df)
nunique(df)
install.packages("miscset")
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(reticulate)
library(umap)
use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
nunique(df)
warnings()
print(nunique(df))
View(df)
nuniq = nunique(df)
nuniq = nunique(df)
nuniq
for(col in colnames(df)){
print(col, nunique(col), (nunique(col)/length(col))*100 )
}
warnings()
uniq_info <- data.frame(feature = character(),
num_unique = double(),
percent_unique = double())
for(col in colnames(df)){
uniq_info['feature'] <- col
uniq_info['num_unique'] <- nunique(col)
uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
for(col in colnames(df)){
df %>% group_by(col) %>% summarise(count=n())
}
df %>% group_by(`global_num`) %>% summarise(count=n())
library(data.table)
DT <- data.table(df)
DF[,.N,by=x]
DT <- data.table(df)
DT[,.N,by=x]
for(col in colnames(df)){
df %>% group_by(`global_num`) %>% length(summarise(count=n()))
}
for(col in colnames(df)){
df %>% group_by(`global_num`) %>% length(summarise(count)
}
for(col in colnames(df)){
df %>% group_by(`global_num`) %>% length(summarise(count))
}
dummyData = rep(df)
table(dummyData)
unique(df)
df_uniq <- length(unique(df))
df_uniq <- length(unique(df))
df_uniq
df_uniq <- length(unique(df$sex))
df_uniq
for(col in colnames(df)){
length(unique(df$sex))
}
df_uniq <- length(unique(df$sex))
df_uniq
for(col in colnames(df)){
dfu[col] <- length(unique(df[col]))
}
for(col in colnames(df)){
dfu[col] <- length(unique(df[col]))
}
for(col in colnames(df)){
print(length(unique(df[col])))
}
#df_uniq <- length(unique(df$sex))
#df_uniq
for(col in colnames(df)){
print(col)
print(length(unique(df[col])))
}
#df_uniq <- length(unique(df$sex))
#df_uniq
df_uniq <- length(unique(df['sex']))
df_uniq <- length(unique(df['sex']))
df_uniq
df['sex']
nunique(df['sex'])
nunique(df$sex)
nunique(df$province)
nunique(df$city)
nunique(df$col)
col = 'sex'
nunique(df$col)
uniq_info['feature']<-colnames(df)
uniq_info['feature']<-colnames(df).T
for(col in colnames(df)){
uniq_info['feature'] <- col
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
View(uniq_info)
for(col in colnames(df)){
print(col)
#uniq_info['feature'] <- col
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
n_age
df[n_age]
df['n_age']
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(reticulate)
library(umap)
use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
df <- read_csv("PatientInfo.csv")
nrow(df)
ncol(df)
head(df, n = 6)
# count null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
#populate null values in numeric columns with mean of column
features = c('global_num', 'birth_year', 'infection_order', 'contact_number')
for(i in features){
#print(i)
df[is.na(df[,i]), i] <- sapply(df[i], mean, na.rm=TRUE)
}
#calculate values based on what we populated
today = as.numeric(format(Sys.Date(), "%Y"))
df$n_age <- today - df$birth_year
#binning years to #s for age
bins <- c(1910, 1920, 1930, 1940,1950,1960,1970,1980,1990,2000, 2010, Inf)
names <- c('100s', '90s', '80s', '70s', '60s', '50s', '40s', '30s', '20s', '10s', '0s')
df$age <- cut(df$birth_year, breaks = bins, labels = names)
# for disease, replace true with 1 and na/false with 0
df$disease <- lapply(df$disease, as.numeric)
df$disease[is.na(df$disease)] <-0
# fill in date values that cannot be predicted with 0
df$released_date <- as.character(df$released_date)
df$released_date[is.na(df$released_date)] <- 0
df$deceased_date <- as.character(df$deceased_date)
df$deceased_date[is.na(df$deceased_date)] <- 0
# fill missing values in confirmed date, then fill missing values in symptom onset with confirmed date
df <- df %>% fill("confirmed_date")
df$symptom_onset_date <- df$symptom_onset_date %>% coalesce(df$symptom_onset_date, df$confirmed_date)
#fill in infected_by and infection_case
df <- df %>% fill(c("infected_by", "infection_case", "sex", "city"), .direction = "down")
df <- df %>% fill("infected_by", .direction = "up")
# check for null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
df <- subset(df, select = -c(`symptom_onset_date`, `confirmed_date`, `released_date`, `deceased_date`))
uniq_info <- data.frame()
for(col in colnames(df)){
print(col)
uniq_info['feature'] <- col
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
View(uniq_info)
result <- matrix(ncol=3, nrows=length(colnames(df)))
x <- c(5,26,6, 54,564,54,465)
length(x)
x <- colnames(df)
length(x)
cnames <- colnames(df)
result <- matrix(ncol=3, nrows=length(cnames))
cnames <- colnames(df)
nrows <- length(cnames)
result <- matrix(ncol=3, nrows=nrows)
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3, nrows=nr)
nr
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3)
for(col in colnames(df)){
print(col)
result <- col
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
result
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3)
for(col in colnames(df)){
print(col)
result[col] <- col
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
result
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3)
for(col in colnames(df)){
print(col)
result[col] <- nunique(df[col])
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
result
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3)
for(col in colnames(df)){
#print(col)
temp = df[col]
result[col] <- unique(temp)
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3)
for(col in colnames(df)){
#print(col)
temp = df[col]
result[col] <- unique(temp)
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
result
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3)
for(col in colnames(df)){
#print(col)
temp = df[col]
result[col] <- length(unique(temp))
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
result
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3)
for(col in colnames(df)){
#print(col)
temp = df[col]
temp2 = unique(temp)
result[col] <- length(temp2)
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
result
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3)
for(col in colnames(df)){
#print(col)
temp = df[col]
temp2 = unique(temp)
result[col] <- lengths(temp2)
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
result
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3)
for(col in colnames(df)){
#print(col)
temp = df[col]
result[col] <- lengths(unique(temp))
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
result
result.T
results.t
t(results)
t(result)
result.t
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3)
for(col in colnames(df)){
#print(col)
temp = df[col]
result[,col] <- lengths(unique(temp))
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3)
for(col in colnames(df)){
for(ii in 1:2){
temp = df[col]
result[ii,col] <- lengths(unique(temp))
}
#print(col)
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3)
for(col in colnames(df)){
temp = df[col]
result[col,] <- lengths(unique(temp))
#print(col)
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
cnames <- colnames(df)
nr <- length(cnames)
result <- matrix(ncol=3)
for(col in colnames(df)){
temp = df[col]
result[col] <- lengths(unique(temp))
#print(col)
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
result
result <- colnames(df)
result <- colnames(df).t
result <- t(colnames(df))
View(result)
View(result)
result <- c('feature', 'num_unique', 'percent_unique')
result <- t(c('feature', 'num_unique', 'percent_unique'))
colnames(result) <- c('feature', 'num_unique', 'percent_unique')
View(result)
View(result)
colnames(result) <- c('feature', 'num_unique', 'percent_unique')
for(col in colnames(df)){
result['feature'] <- col
temp = df[col]
result['num_unique'] <- lengths(unique(temp))
#print(col)
#uniq_info['num_unique'] <- nunique(col)
#uniq_info['percent_unique'] <- (nunique(col)/length(col))*100
}
result
result$feature <- c(10, 5, 2)
colnames(result) <- c('feature', 'num_unique', 'percent_unique')
View(result)
View(result)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(reticulate)
library(umap)
use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
df <- read_csv("PatientInfo.csv")
nrow(df)
ncol(df)
head(df, n = 6)
# count null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
#populate null values in numeric columns with mean of column
features = c('global_num', 'birth_year', 'infection_order', 'contact_number')
for(i in features){
#print(i)
df[is.na(df[,i]), i] <- sapply(df[i], mean, na.rm=TRUE)
}
#calculate values based on what we populated
today = as.numeric(format(Sys.Date(), "%Y"))
df$n_age <- today - df$birth_year
#binning years to #s for age
bins <- c(1910, 1920, 1930, 1940,1950,1960,1970,1980,1990,2000, 2010, Inf)
names <- c('100s', '90s', '80s', '70s', '60s', '50s', '40s', '30s', '20s', '10s', '0s')
df$age <- cut(df$birth_year, breaks = bins, labels = names)
# for disease, replace true with 1 and na/false with 0
df$disease <- lapply(df$disease, as.numeric)
df$disease[is.na(df$disease)] <-0
# fill in date values that cannot be predicted with 0
df$released_date <- as.character(df$released_date)
df$released_date[is.na(df$released_date)] <- 0
df$deceased_date <- as.character(df$deceased_date)
df$deceased_date[is.na(df$deceased_date)] <- 0
# fill missing values in confirmed date, then fill missing values in symptom onset with confirmed date
df <- df %>% fill("confirmed_date")
df$symptom_onset_date <- df$symptom_onset_date %>% coalesce(df$symptom_onset_date, df$confirmed_date)
#fill in infected_by and infection_case
df <- df %>% fill(c("infected_by", "infection_case", "sex", "city"), .direction = "down")
df <- df %>% fill("infected_by", .direction = "up")
# check for null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
df <- subset(df, select = -c(`symptom_onset_date`, `confirmed_date`, `released_date`, `deceased_date`))
colnames(result) <- c('feature', 'num_unique', 'percent_unique')
result <- data.frame()
colnames(result) <- c('feature', 'num_unique', 'percent_unique')
View(result)
dimnames(A) <- list(colnames(df), c('feature', 'num_unique', 'percent_unique')
)
A = matrix(
+   c(), # the data elements
+   nrow=2,              # number of rows
+   ncol=3,              # number of columns
+   byrow = TRUE)        # fill matrix by rows
A < data.frame()
A <- data.frame()
dimnames(A) <- list(colnames(df), c('feature', 'num_unique', 'percent_unique'))
cols <- colnames(df)
cols
cols <- list(colnames(df))
cols
rws <- list(colnames(df))
cls <- list('feature', 'num_unique', 'percent_unique')
cls
rws
cls <- c('feature', 'num_unique', 'percent_unique')
cls
rws <- colnames(df)
rws
dimnames(A) <- list(rws, cls)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(reticulate)
library(umap)
use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(reticulate)
library(umap)
use_python("/usr/local/bin/python")
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
pandas <- reticulate::import("pandas")
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(reticulate)
library(umap)
use_python("/usr/local/bin/python")
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
py_config()
use_python("C:/Users/gryka/Anaconda3/python.exe")
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(reticulate)
library(umap)
use_python("/usr/local/bin/python3")
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
py_config()
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(reticulate)
library(umap)
reticulate::use_python("/usr/local/bin/python3", required=TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(reticulate)
library(umap)
reticulate::use_python("C:/Users/gryka/Anaconda3/python.exe", required=TRUE)
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
py_available()
py_config_error_message()
reticulate::py_config()
reticulate::py_config()
y
reticulate::py_config()
reticulate::py_config()
setwd("~/GitHub/SBwork")
reticulate::py_config()
Sys.setenv(RETICULATE_PYTHON='venv/Scripts/python')
reticulate::py_config()
knitr::opts_chunk$set(echo = TRUE)
reticulate::use_python("venv/Scripts/python", required=TRUE)
reticulate::use_python("venv/Scripts/python", required=TRUE)
reticulate::use_python("venv/Scripts/python3", required=TRUE)
reticulate::use_python("C:/Users/gryka/Documents/GitHub/SBwork/venv/Scripts/python", required=TRUE)
