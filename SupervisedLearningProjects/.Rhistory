x
x = (1:99)/4.6
x
x = (1:99)/4.4
x
x = (1:99)/4.2
x
x = (1:99)/4.1
x
plot(x,y)
identify(x, y, labels = name, plot = TRUE)
x(98)
identify(x, y, labels = name, plot = TRUE)
plot(x,y)
identify(x, y, labels = name, plot = TRUE)
plot(Usage)
identify(Usage, labels = name, plot = TRUE)
plot(Work)
identify
identifier = points[1:10]
identifier = points(1:10)
identify(Work, labels = identifier, plot = TRUE)
plot(Work)
identify(Work, labels = points(1:10), plot = TRUE)
?labels
plot(Work)
identify(Work, labels = name, plot = TRUE)
plot(Work)
identify(Work, labels = name, plot = TRUE)
plot(Work)
identify(Work, labels = name, plot = TRUE)
name = letters[1:4]
plot(Work)
identify(Work, labels = name, plot = TRUE)
Work
legend("b=14", "c=-11", "a = +/- 14")
legend("bottomright", y=NULL,"b=14", "c=-11", "a = +/- 14")
legend("bottomright", y=NULL,col = par("b=14"))
legend("bottomright", y=NULL,col = par(b=14))
legend("bottomright", y=NULL)
legend("bottomright", y=NULL, cex = "b=14")
legend("bottomright", y=NULL, title = "Plotted Points")
legend("bottomright")
legend("bottomright", lwd = c(1,1), col = c("blue"))
legend("bottomright",y=NULL, lwd = c(1,1), col = c("blue"))
legend(x = "bottomright",y=NULL, lwd = c(1,1), col = c("blue"))
legend(x = "bottomright",y=NULL, lwd = c(1,1), col = c("blue"), legend = c("4", "6", "8"))
plot(Work)
identify(Work, labels = name, plot = TRUE)
plot(Work)
identify(Work, labels = name, plot = TRUE)
legend(x = "bottomright",y=NULL, lwd = c(1,1), col = c("blue"), legend = c("a = +/- 14", "b = 14", "c = -11"))
legend(x = "bottomright",y=NULL, lines(Work, col="blue",lwd =2), legend = c("a = +/- 14", "b = 14", "c = -11"))
plot(Work)
identify(Work, labels = name, plot = TRUE)
legend(x = "bottomright",y=NULL, lines(Work, col="blue",lwd =2), legend = c("a = +/- 14", "b = 14", "c = -11"))
legend(x = "bottomright",y=NULL, lines(Work, col="blue",lwd =2), legend = c("a = 14", "b = 14", "c = -11"))
plot(Work)
identify(Work, labels = name, plot = TRUE)
legend(x = "bottomright",y=NULL, lines(Work, col="blue",lwd =2), legend = c("a = 14", "b = 14", "c = -11"))
lines(Usage)
lines(Usage, col="green")
par(new=TRUE)
plot(Usage)
plot(Work)
identify(Work, labels = name, plot = TRUE)
legend(x = "bottomright",y=NULL, lines(Work, col="blue",lwd =2), legend = c("a = 14", "b = 14", "c = -11"))
# Electricity Consumption
dataFile <- "C:/Users/Hailey/Desktop/2016/blog/2-Electricity Consumption/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
#Plot 1 -- Histogram of Global Power
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot1.png", width=480, height=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
#Plot 2 -- Active Power plotted with Time
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot2.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
#Plot 3 -- Energy SubMetering plotted with Time
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
subMetering1 <- as.numeric(subSetData$Sub_metering_1) #kitchen, containing mainly a dishwasher, an oven and a microwave
subMetering2 <- as.numeric(subSetData$Sub_metering_2) #laundry room, containing a washing-machine, a tumble-drier, a refrigerator and a light
subMetering3 <- as.numeric(subSetData$Sub_metering_3) #electric water-heater and an air-conditioner
png("plot3.png", width=480, height=480)
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
#Plot 4 -- Comparison of Active & SubMetering to New plots-> Voltage & Reactive Power
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
voltage <- as.numeric(subSetData$Voltage)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
#Plot 5 -- Classification Tree
library(rpart)
# grow tree
#fit <- rpart(dataFile ~ Age + Number + Start,
#             method="class", data=dataFile)  #grow tree
dataFile$
w
clc
library(randomForest) # Random Forest prediction
fit <- randomForest(Global_active_power ~ Voltage + Global_reactive_power + Global_intensity, data=subSetData)
fit1 <- randomForest(Global_active_power ~ Sub_metering_1 + Sub_metering_2 + Sub_metering_3 ,data=subSetData)
print(fit) # view results
print(fit1)
importance(fit) # importance of each predictor
importance(fit1)
install.packages("randomForest")
library(randomForest) # Random Forest prediction
fit <- randomForest(Global_active_power ~ Voltage + Global_reactive_power + Global_intensity, data=subSetData)
fit1 <- randomForest(Global_active_power ~ Sub_metering_1 + Sub_metering_2 + Sub_metering_3 ,data=subSetData)
print(fit) # view results
print(fit1)
importance(fit) # importance of each predictor
importance(fit1)
rfNews()
library(randomForest) # Random Forest prediction
fit <- randomForest(Global_active_power ~ Voltage + Global_reactive_power + Global_intensity, data=subSetData)
fit1 <- randomForest(Global_active_power ~ Sub_metering_1 + Sub_metering_2 + Sub_metering_3 ,data=subSetData)
fit <- randomForest(globalActivePower ~ voltage + globalReactivePower + as.numeric(Global_intensity), data=as.numeric(subSetData))
fit <- randomForest(globalActivePower ~ voltage + globalReactivePower + as.numeric(Global_intensity), data=datetime)
globalIntensity <- as.numeric(subSetData$Global_intensity)
fit <- randomForest(globalActivePower ~ voltage + globalReactivePower + globalIntensity, data=datetime)
fit1 <- randomForest(globalActivePower ~ subMetering1 + subMetering2 + subMetering3 ,data=datetime)
print(fit) # view results
print(fit1)
importance(fit) # importance of each predictor
importance(fit1)
install.packages("party")
library(party)
plot(fit, main = 'Conditional Inference Tree for Electricity Consumption')
fit2 <- ctree(globalActivePower ~ voltage + globalReactivePower + globalIntensity , data = na.omit(cu.summary))
install.packages("rpart")
library(rpart)
printcp(fit) # display the results
fit <- rpart(globalActivePower ~ voltage + globalReactivePower + globalIntensity, data=datetime) #<- better option
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, uniform=TRUE,
main="Classification Tree for Electricity Consumption")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
post(fit, file = "C:/Users/Hailey/Desktop/2016/blog/2-Electricity Consumption/tree.ps",
title = "Classification Tree for Electricity Consumption")
pfit<- prune(fit, cp=   fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
plot(pfit, uniform=TRUE,
main="Pruned Classification Tree for Electricity Consumption")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
post(pfit, file = "c:/Users/Hailey/Desktop/2016/blog/2-Electricity Consumption/ptree.ps",
title = "Pruned Classification Tree for Electricity Consumption")
printcp(fit) # display the results
install.packages('blogdown')
blogdown::update_hugo()
blogdown::update_hugo()
blogdown::new_site()
blogdown::new_site()
blogdown::new_site()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Chunk 2
library(tidyverse)
library(reticulate)
library(lubridate) #To deal with date fields
library(shiny)
library(scales)
theme_set(theme_light())
# Chunk 3
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
url_LondonHousePrices = "https://data.london.gov.uk/download/uk-house-price-index/70ac0766-8902-4eb5-aab5-01951aaed773/UK%20House%20price%20index.xls"
properties = pd.read_excel(url_LondonHousePrices, sheet_name='Average price', index_col= None)
properties.head()
# Chunk 4
properties <- py$properties
glimpse(properties)
properties <- properties %>% rename(Date = `Unnamed: 0`) %>%
select(-c(`Unnamed: 34`, `Unnamed: 37`, `Unnamed: 47`))
lifecycle::last_warnings()
install.packages("dplyr")
install.packages("dplyr")
devtools::install_github("hadley/lazyeval")
devtools::install_github("hadley/dplyr")
---
title: "Ski Data"
author: "H.Gryk"
date: "July 22, 2020"
output: html_document
runtime: shiny
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```
## Introduction
This Rmarkdown document shows the use of both R and Python for analyzing the London Boroughs dataset. The `reticulate` library allows us to use Python code in an R environment.
load("~/.RData")
setwd("~/GitHub/SBwork/RegressionProjects")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(reticulate)
library(umap)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(reticulate)
#library(umap)
reticulate::use_python("C:/Users/gryka/Anaconda3/python.exe", required=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(reticulate)
#library(umap)
reticulate::use_python("C:/Users/Hailey/Anaconda3/python.exe", required=TRUE)
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
df <- read_csv("PatientInfo.csv")
nrow(df)
ncol(df)
head(df, n = 6)
# count null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
#populate null values in numeric columns with mean of column
features = c('global_num', 'birth_year', 'infection_order', 'contact_number')
for(i in features){
#print(i)
df[is.na(df[,i]), i] <- sapply(df[i], mean, na.rm=TRUE)
}
#calculate values based on what we populated
today = as.numeric(format(Sys.Date(), "%Y"))
df$n_age <- today - df$birth_year
#binning years to #s for age
bins <- c(1910, 1920, 1930, 1940,1950,1960,1970,1980,1990,2000, 2010, Inf)
names <- c('100s', '90s', '80s', '70s', '60s', '50s', '40s', '30s', '20s', '10s', '0s')
df$age <- cut(df$birth_year, breaks = bins, labels = names)
# for disease, replace true with 1 and na/false with 0
df$disease <- lapply(df$disease, as.numeric)
df$disease[is.na(df$disease)] <-0
# fill in date values that cannot be predicted with 0
df$released_date <- as.character(df$released_date)
df$released_date[is.na(df$released_date)] <- 0
df$deceased_date <- as.character(df$deceased_date)
df$deceased_date[is.na(df$deceased_date)] <- 0
# fill missing values in confirmed date, then fill missing values in symptom onset with confirmed date
df <- df %>% fill("confirmed_date")
df$symptom_onset_date <- df$symptom_onset_date %>% coalesce(df$symptom_onset_date, df$confirmed_date)
#fill in infected_by and infection_case
df <- df %>% fill(c("infected_by", "infection_case", "sex", "city"), .direction = "down")
df <- df %>% fill("infected_by", .direction = "up")
# check for null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
df <- subset(df, select = -c(`symptom_onset_date`, `confirmed_date`, `released_date`, `deceased_date`))
View(df)
boxplot(n_age~state,data=df, main="COVID infection state considering age",
xlab="State", ylab="Age")
sapply(df, class)
transform(df, sex = as.factor(sex),
disease = as.factor(disease)
)
transform(df, sex = as.factor(sex))
sapply(df, class)
df <- df %>% transform(sex = as.factor(sex)) %>%
unstack(disease)
df <- df %>% transform(sex = as.factor(sex)) %>%
unstack(disease)
df <- df %>% transform(sex = as.factor(sex),
disease = as.factor(unstack(disease)))
df <- df %>% transform(sex = as.factor(sex))
df$disease <- unstack(df$disease)
df <- df %>% transform(sex = as.factor(sex))
un <- unstack(df, value ~ disease)
df <- df %>% transform(sex = as.factor(sex))
un <- unstack(df, disease)
df <- df %>% transform(sex = as.factor(sex))
un <- unstack(df, df$disease)
df <- df %>% transform(sex = as.factor(sex))
un <- unstack(df, df ~ disease)
df <- df %>% transform(sex = as.factor(sex))
un <- unstack(df$disease)
df <- df %>% transform(sex = as.factor(sex),
disease = as.factor(unlist(disease)))
sapply(df, class)
df <- df %>% transform(sex = as.factor(sex),
disease = as.factor(unlist(disease)),
country = as.factor(country),
province = as.factor(province),
city = as.factor(city),
infection_case = as.factor(infection_case),
state = as.factor(state)
)
sapply(df, class)
sample = sample.split(df$state, SplitRatio = 0.75)
install.packages("caTools")
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(caTools)
library(randomForest)
library(reticulate)
#library(umap)
reticulate::use_python("C:/Users/Hailey/Anaconda3/python.exe", required=TRUE)
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
sample = sample.split(df$state, SplitRatio = 0.75)
train = subset(df, sample == TRUE)
test = subset(df, sample ==FALSE)
dim(train)
dim(test)
rf <- randomForest(state ~ ., data = train)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(caTools)
library(randomForest)
library(reticulate)
#library(umap)
reticulate::use_python("C:/Users/Hailey/Anaconda3/python.exe", required=TRUE)
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
df <- read_csv("PatientInfo.csv")
nrow(df)
ncol(df)
head(df, n = 6)
# count null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
#populate null values in numeric columns with mean of column
features = c('global_num', 'birth_year', 'infection_order', 'contact_number')
for(i in features){
#print(i)
df[is.na(df[,i]), i] <- sapply(df[i], mean, na.rm=TRUE)
}
#calculate values based on what we populated
today = as.numeric(format(Sys.Date(), "%Y"))
df$n_age <- today - df$birth_year
#binning years to #s for age
bins <- c(1910, 1920, 1930, 1940,1950,1960,1970,1980,1990,2000, 2010, Inf)
names <- c('100s', '90s', '80s', '70s', '60s', '50s', '40s', '30s', '20s', '10s', '0s')
df$age <- cut(df$birth_year, breaks = bins, labels = names)
# for disease, replace true with 1 and na/false with 0
df$disease <- lapply(df$disease, as.numeric)
df$disease[is.na(df$disease)] <-0
# fill in date values that cannot be predicted with 0
df$released_date <- as.character(df$released_date)
df$released_date[is.na(df$released_date)] <- 0
df$deceased_date <- as.character(df$deceased_date)
df$deceased_date[is.na(df$deceased_date)] <- 0
# fill missing values in confirmed date, then fill missing values in symptom onset with confirmed date
df <- df %>% fill("confirmed_date")
df$symptom_onset_date <- df$symptom_onset_date %>% coalesce(df$symptom_onset_date, df$confirmed_date)
#fill in infected_by and infection_case
df <- df %>% fill(c("infected_by", "infection_case", "sex", "city", "state"), .direction = "down")
df <- df %>% fill("infected_by", .direction = "up")
# check for null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
df <- subset(df, select = -c(`symptom_onset_date`, `confirmed_date`, `released_date`, `deceased_date`, `city`))
boxplot(n_age~state,data=df, main="COVID infection state considering age",
xlab="State", ylab="Age")
df <- df %>% transform(sex = as.factor(sex),
disease = as.factor(unlist(disease)),
country = as.factor(country),
province = as.factor(province),
city = as.factor(city),
infection_case = as.factor(infection_case),
state = as.factor(state)
)
df <- df %>% transform(sex = as.factor(sex),
disease = as.factor(unlist(disease)),
country = as.factor(country),
province = as.factor(province),
#city = as.factor(city),
infection_case = as.factor(infection_case),
state = as.factor(state)
)
sapply(df, class)
sample = sample.split(df$state, SplitRatio = 0.75)
train = subset(df, sample == TRUE)
test = subset(df, sample ==FALSE)
dim(train)
dim(test)
rf <- randomForest(state ~ ., data = train)
rf <- randomForest(state ~ ., data = train)
rf
pred = predict(rf, newdata=test[-14])
test[-14]
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(caTools)
library(randomForest)
library(reticulate)
#library(umap)
reticulate::use_python("C:/Users/Hailey/Anaconda3/python.exe", required=TRUE)
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
df <- read_csv("PatientInfo.csv")
nrow(df)
ncol(df)
head(df, n = 6)
# count null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
#populate null values in numeric columns with mean of column
features = c('global_num', 'birth_year', 'infection_order', 'contact_number')
for(i in features){
#print(i)
df[is.na(df[,i]), i] <- sapply(df[i], mean, na.rm=TRUE)
}
#calculate values based on what we populated
today = as.numeric(format(Sys.Date(), "%Y"))
df$n_age <- today - df$birth_year
#binning years to #s for age
bins <- c(1910, 1920, 1930, 1940,1950,1960,1970,1980,1990,2000, 2010, Inf)
names <- c('100s', '90s', '80s', '70s', '60s', '50s', '40s', '30s', '20s', '10s', '0s')
df$age <- cut(df$birth_year, breaks = bins, labels = names)
# for disease, replace true with 1 and na/false with 0
df$disease <- lapply(df$disease, as.numeric)
df$disease[is.na(df$disease)] <-0
# fill in date values that cannot be predicted with 0
df$released_date <- as.character(df$released_date)
df$released_date[is.na(df$released_date)] <- 0
df$deceased_date <- as.character(df$deceased_date)
df$deceased_date[is.na(df$deceased_date)] <- 0
# fill missing values in confirmed date, then fill missing values in symptom onset with confirmed date
df <- df %>% fill("confirmed_date")
df$symptom_onset_date <- df$symptom_onset_date %>% coalesce(df$symptom_onset_date, df$confirmed_date)
#fill in infected_by and infection_case
df <- df %>% fill(c("infected_by", "infection_case", "sex", "city", "state"), .direction = "down")
df <- df %>% fill("infected_by", .direction = "up")
# check for null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
df <- subset(df, select = -c(`symptom_onset_date`, `confirmed_date`, `released_date`, `deceased_date`, `city`))
boxplot(n_age~state,data=df, main="COVID infection state considering age",
xlab="State", ylab="Age")
df <- df %>% transform(sex = as.factor(sex),
disease = as.factor(unlist(disease)),
country = as.factor(country),
province = as.factor(province),
#city = as.factor(city),
infection_case = as.factor(infection_case),
state = as.factor(state)
)
sapply(df, class)
sample = sample.split(df$state, SplitRatio = 0.75)
train = subset(df, sample == TRUE)
test = subset(df, sample ==FALSE)
dim(train)
dim(test)
rf <- randomForest(state ~ ., data = train)
rf
pred = predict(rf, newdata=test[-13])
cm = table(test[,13], pred)
cm = table(test[,13], pred)
cm
