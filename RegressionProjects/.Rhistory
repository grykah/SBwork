properties <- properties %>% rename(Date = `Unnamed: 0`) %>%
select(-c(`Unnamed: 34`, `Unnamed: 37`, `Unnamed: 47`))
lifecycle::last_warnings()
install.packages("dplyr")
install.packages("dplyr")
devtools::install_github("hadley/lazyeval")
devtools::install_github("hadley/dplyr")
---
title: "Ski Data"
author: "H.Gryk"
date: "July 22, 2020"
output: html_document
runtime: shiny
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```
## Introduction
This Rmarkdown document shows the use of both R and Python for analyzing the London Boroughs dataset. The `reticulate` library allows us to use Python code in an R environment.
load("~/.RData")
setwd("~/GitHub")
packageVersion("reticulate")
devtools::install_github("rstudio/reticulate")
devtools::install_github("rstudio/reticulate")
reticulate::py_config()
reticulate::py_config()
reticulate::py_available()
reticulate::use_python('C:/Users/Hailey/anaconda3', required = TRUE)
reticulate::use_python('C:/Users/Hailey/anaconda3', required = TRUE)
reticulate::py_config()
reticulate::repl_python()
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
test = pd.read_csv("PatientInfo.csv")
import os
os.getcwd()
setwd("~/GitHub/SBwork/RegressionProjects")
setwd("~/GitHub/SBwork/RegressionProjects")
reticulate::repl_python()
os.getcwd()
test = pd.read_csv("PatientInfo.csv")
test.head()
exit
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
#library(umap)
library(reticulate)
use_python('C:/Users/Hailey/anaconda3/python.exe', required = TRUE)
#reticulate::use_python('C:\\Users\\Hailey\\anaconda3\\python.exe', required = T)
#reticulate::repl_python()
#reticulate::use_python("C:/Users/gryka/Anaconda3/python.exe", required=TRUE)
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
#library(umap)
library(reticulate)
use_python('C:/Users/Hailey/anaconda3', required = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
#library(umap)
library(reticulate)
use_python('C:/Users/Hailey/anaconda3/python.exe', required = TRUE)
#reticulate::use_python('C:\\Users\\Hailey\\anaconda3\\python.exe', required = T)
#reticulate::repl_python()
#reticulate::use_python("C:/Users/gryka/Anaconda3/python.exe", required=TRUE)
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
#library(umap)
library(reticulate)
use_python('C:/Users/Hailey/anaconda3/python.exe', required = TRUE)
#reticulate::use_python('C:\\Users\\Hailey\\anaconda3\\python.exe', required = T)
#reticulate::repl_python()
#reticulate::use_python("C:/Users/gryka/Anaconda3/python.exe", required=TRUE)
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
df <- read_csv("PatientInfo.csv")
nrow(df)
ncol(df)
head(df, n = 6)
# count null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
#populate null values in numeric columns with mean of column
features = c('global_num', 'birth_year', 'infection_order', 'contact_number')
for(i in features){
#print(i)
df[is.na(df[,i]), i] <- sapply(df[i], mean, na.rm=TRUE)
}
#calculate values based on what we populated
today = as.numeric(format(Sys.Date(), "%Y"))
df$n_age <- today - df$birth_year
#binning years to #s for age
bins <- c(1910, 1920, 1930, 1940,1950,1960,1970,1980,1990,2000, 2010, Inf)
names <- c('100s', '90s', '80s', '70s', '60s', '50s', '40s', '30s', '20s', '10s', '0s')
df$age <- cut(df$birth_year, breaks = bins, labels = names)
# for disease, replace true with 1 and na/false with 0
df$disease <- lapply(df$disease, as.numeric)
df$disease[is.na(df$disease)] <-0
# fill in date values that cannot be predicted with 0
df$released_date <- as.character(df$released_date)
df$released_date[is.na(df$released_date)] <- 0
df$deceased_date <- as.character(df$deceased_date)
df$deceased_date[is.na(df$deceased_date)] <- 0
# fill missing values in confirmed date, then fill missing values in symptom onset with confirmed date
df <- df %>% fill("confirmed_date")
df$symptom_onset_date <- df$symptom_onset_date %>% coalesce(df$symptom_onset_date, df$confirmed_date)
#fill in infected_by and infection_case
df <- df %>% fill(c("infected_by", "infection_case", "sex", "city"), .direction = "down")
df <- df %>% fill("infected_by", .direction = "up")
# check for null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
df <- subset(df, select = -c(`symptom_onset_date`, `confirmed_date`, `released_date`, `deceased_date`))
package_version("knitr")
package_version("knit")
packageVersion()
package_version()
package_version(knitr)
packageVersion(knitr)
packageVersion()
packageVersion("knitr")
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_engines$set(python = reticulate::eng_python)
boxplot(state~n_age,data=df, main="Disease State by Age",
xlab="Age", ylab="State")
boxplot(n_age~state,data=df, main="Disease State by Age",
xlab="Age", ylab="State")
boxplot(n_age~state,data=df, main="Disease States and Age",
xlab="State", ylab="Age")
set.seed(1234)
df_split <- df %>% initial_split(strata = state)
df1_train <- training(df_split)
df1_test <- testing(df_split)
warnings()
install.packages("randomForest")
rf <- rand_forest(trees = 100, mode = "classification") %>%
set_engine("ranger") %>%
fit(state ~ ., data = df)
rlang::last_error()
install.packages('ranger')
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(ranger)
#library(umap)
library(reticulate)
use_python('C:/Users/Hailey/anaconda3/python.exe', required = TRUE)
#reticulate::use_python('C:\\Users\\Hailey\\anaconda3\\python.exe', required = T)
#reticulate::repl_python()
#reticulate::use_python("C:/Users/gryka/Anaconda3/python.exe", required=TRUE)
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
rf <- rand_forest(trees = 100, mode = "classification") %>%
set_engine("ranger") %>%
fit(state ~ ., data = df)
rf <- rand_forest(trees = 100, mode = "classification") %>%
set_engine("ranger")
#fit(state ~ ., data = df)
rf_spec <- rand_forest(trees = 100, mode = "classification") %>%
set_engine("ranger")
rf_fit <- rf_spec %>%
fit(state ~ ., data = df1_train)
rlang::last_error()
rf_spec <- rand_forest(mode = "regression") %>%
set_engine("ranger")
rf_spec <- rand_forest(mode = "regression") %>%
set_engine("ranger")
rf_spec
rf_fit <- rf_spec %>%
fit(state ~ ., data = df1_train)
#fill in infected_by and infection_case
df <- df %>% fill(c("infected_by", "infection_case", "sex", "city", "state"), .direction = "down")
df <- df %>% fill("infected_by", .direction = "up")
# check for null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
df <- subset(df, select = -c(`symptom_onset_date`, `confirmed_date`, `released_date`, `deceased_date`))
boxplot(n_age~state,data=df, main="Disease States and Age",
xlab="State", ylab="Age")
set.seed(1234)
df_split <- df %>% initial_split(strata = state)
df1_train <- training(df_split)
df1_test <- testing(df_split)
rf_spec <- rand_forest(mode = "regression") %>%
set_engine("ranger")
rf_spec
rf_fit <- rf_spec %>%
fit(state ~ ., data = df1_train)
colnames(df)
View(df)
colnames(df)
rf_spec <- rand_forest(mode = "regression") %>%
set_engine("ranger")
lm_spec <- linear_reg() %>%
set_engine(engine = "lm")
lm_spec
rf_spec
rf_fit <- rf_spec %>%
fit(state ~ ., data = df1_train)
#rf_fit <- rf_spec %>%
#  fit(state ~ ., data = df1_train)
lm_fit <- lm_spec %>%
fit(state ~ ., data = df)
#rf_fit <- rf_spec %>%
#  fit(state ~ ., data = df1_train)
lm_fit <- lm_spec %>%
fit(state ~ -disease, data = df)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_engines$set(python = reticulate::eng_python)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(ranger)
#library(umap)
library(reticulate)
use_python('C:/Users/Hailey/anaconda3/python.exe', required = TRUE)
#reticulate::use_python('C:\\Users\\Hailey\\anaconda3\\python.exe', required = T)
#reticulate::repl_python()
#reticulate::use_python("C:/Users/gryka/Anaconda3/python.exe", required=TRUE)
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
df <- read_csv("PatientInfo.csv")
nrow(df)
ncol(df)
head(df, n = 6)
# count null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
#populate null values in numeric columns with mean of column
features = c('global_num', 'birth_year', 'infection_order', 'contact_number')
for(i in features){
#print(i)
df[is.na(df[,i]), i] <- sapply(df[i], mean, na.rm=TRUE)
}
#calculate values based on what we populated
today = as.numeric(format(Sys.Date(), "%Y"))
df$n_age <- today - df$birth_year
#binning years to #s for age
bins <- c(1910, 1920, 1930, 1940,1950,1960,1970,1980,1990,2000, 2010, Inf)
names <- c('100s', '90s', '80s', '70s', '60s', '50s', '40s', '30s', '20s', '10s', '0s')
df$age <- cut(df$birth_year, breaks = bins, labels = names)
# for disease, replace true with 1 and na/false with 0
df$disease <- lapply(df$disease, as.numeric)
df$disease[is.na(df$disease)] <-0
# fill in date values that cannot be predicted with 0
df$released_date <- as.character(df$released_date)
df$released_date[is.na(df$released_date)] <- 0
df$deceased_date <- as.character(df$deceased_date)
df$deceased_date[is.na(df$deceased_date)] <- 0
# fill missing values in confirmed date, then fill missing values in symptom onset with confirmed date
df <- df %>% fill("confirmed_date")
df$symptom_onset_date <- df$symptom_onset_date %>% coalesce(df$symptom_onset_date, df$confirmed_date)
#fill in infected_by and infection_case
df <- df %>% fill(c("infected_by", "infection_case", "sex", "city", "state"), .direction = "down")
df <- df %>% fill("infected_by", .direction = "up")
# check for null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
df <- subset(df, select = -c(`symptom_onset_date`, `confirmed_date`, `released_date`, `deceased_date`, `disease`))
boxplot(n_age~state,data=df, main="Disease States and Age",
xlab="State", ylab="Age")
set.seed(1234)
df_split <- df %>% initial_split(strata = state)
df1_train <- training(df_split)
df1_test <- testing(df_split)
rf_spec <- rand_forest(mode = "regression") %>%
set_engine("ranger")
lm_spec <- linear_reg() %>%
set_engine(engine = "lm")
rf_spec
lm_spec
#rf_fit <- rf_spec %>%
#  fit(state ~ ., data = df1_train)
lm_fit <- lm_spec %>%
fit(state ~ , data = df)
#rf_fit <- rf_spec %>%
#  fit(state ~ ., data = df1_train)
lm_fit <- lm_spec %>%
fit(state ~ ., data = df)
rf_fit <- rf_spec %>%
fit(state ~ ., data = df1_train)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_engines$set(python = reticulate::eng_python)
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(ranger)
#library(umap)
library(reticulate)
use_python('C:/Users/Hailey/anaconda3/python.exe', required = TRUE)
#reticulate::use_python('C:\\Users\\Hailey\\anaconda3\\python.exe', required = T)
#reticulate::repl_python()
#reticulate::use_python("C:/Users/gryka/Anaconda3/python.exe", required=TRUE)
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
df <- read_csv("PatientInfo.csv")
nrow(df)
ncol(df)
head(df, n = 6)
# count null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
#populate null values in numeric columns with mean of column
features = c('global_num', 'birth_year', 'infection_order', 'contact_number')
for(i in features){
#print(i)
df[is.na(df[,i]), i] <- sapply(df[i], mean, na.rm=TRUE)
}
#calculate values based on what we populated
today = as.numeric(format(Sys.Date(), "%Y"))
df$n_age <- today - df$birth_year
#binning years to #s for age
bins <- c(1910, 1920, 1930, 1940,1950,1960,1970,1980,1990,2000, 2010, Inf)
names <- c('100s', '90s', '80s', '70s', '60s', '50s', '40s', '30s', '20s', '10s', '0s')
df$age <- cut(df$birth_year, breaks = bins, labels = names)
# for disease, replace true with 1 and na/false with 0
df$disease <- lapply(df$disease, as.numeric)
df$disease[is.na(df$disease)] <-0
# fill in date values that cannot be predicted with 0
df$released_date <- as.character(df$released_date)
df$released_date[is.na(df$released_date)] <- 0
df$deceased_date <- as.character(df$deceased_date)
df$deceased_date[is.na(df$deceased_date)] <- 0
# fill missing values in confirmed date, then fill missing values in symptom onset with confirmed date
df <- df %>% fill("confirmed_date")
df$symptom_onset_date <- df$symptom_onset_date %>% coalesce(df$symptom_onset_date, df$confirmed_date)
#fill in infected_by and infection_case
df <- df %>% fill(c("infected_by", "infection_case", "sex", "city", "state"), .direction = "down")
df <- df %>% fill("infected_by", .direction = "up")
# check for null values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count[order(-na_count)])
head(na_count, n=6)
df <- subset(df, select = -c(`symptom_onset_date`, `confirmed_date`, `released_date`, `deceased_date`))
boxplot(n_age~state,data=df, main="Disease States and Age",
xlab="State", ylab="Age")
set.seed(1234)
df_split <- df %>% initial_split(strata = state)
df1_train <- training(df_split)
df1_test <- testing(df_split)
rf_spec <- rand_forest(mode = "regression") %>%
set_engine("ranger")
lm_spec <- linear_reg() %>%
set_engine(engine = "lm")
rf_spec
lm_spec
rf_fit <- rf_spec %>%
fit(state ~ ., data = df1_train)
results_train <- lm_fit %>%
predict(new_data = df1_train) %>%
mutate(
truth = df1_train$state,
model = "lm"
) %>%
bind_rows(rf_fit %>%
predict(new_data = df1_train) %>%
mutate(
truth = df1_train$state,
model = "rf"
))
library(readr)
library(dplyr)
library(tidyr)
library(miscset)
library(tidyverse)
library(tidymodels)
library(randomForest)
library(ranger)
#library(umap)
library(reticulate)
use_python('C:/Users/Hailey/anaconda3/python.exe', required = TRUE)
#reticulate::use_python('C:\\Users\\Hailey\\anaconda3\\python.exe', required = T)
#reticulate::repl_python()
#reticulate::use_python("C:/Users/gryka/Anaconda3/python.exe", required=TRUE)
#use_condaenv(condaenv='Anaconda3', required = TRUE)
# py_run_string('import umap')
summary(df)
#summary(df)
sapply(df, class)
#summary(df)
sapply(df, class)
df <- transform(df,
sex = as.factor(sex),
disease = as.factor(disease)
)
View(df)
#summary(df)
sapply(df, class)
df <- transform(df,
sex = as.factor(sex)
)
df$disease <- type.convert(df$disease)
#summary(df)
df <- transform(df,
sex = as.factor(sex)
)
df$disease <- type.convert(df$disease)
sapply(df, class)
#summary(df)
df <- transform(df,
sex = as.factor(sex)
)
df$disease <- type.convert(df$disease, as.is =TRUE)
sapply(df, class)
#summary(df)
df <- transform(df,
sex = as.factor(sex)
)
df$disease <- lapply(df$disease, unlist)
sapply(df, class)
#summary(df)
df <- transform(df,
sex = as.factor(sex)
)
df$disease <- data.frame(df$disease, stringsAsFactors = TRUE)
#summary(df)
df <- transform(df,
sex = as.factor(sex)
)
test <- data.frame(df$disease, stringsAsFactors = TRUE)
sapply(df, class)
#summary(df)
df <- transform(df,
sex = as.factor(sex)
)
test <- data.frame(df$disease, stringsAsFactors = TRUE)
sapply(test, class)
#summary(df)
df <- transform(df,
sex = as.factor(sex)
)
test <- data.frame(df$disease, stringsAsFactors = TRUE)
df$disease <-test
#summary(df)
df <- transform(df,
sex = as.factor(sex)
)
test <- data.frame(df$disease, stringsAsFactors = TRUE)
df$disease <-test.T
View(test)
#summary(df)
df <- transform(df,
sex = as.factor(sex)
)
test <- data.frame(df$disease, stringsAsFactors = TRUE)
df$disease <-t(test)
sapply(df, class)
#summary(df)
df <- transform(df,
sex = as.factor(sex)
)
test <- lapply(df$disease, stringsAsFactors = TRUE)
#summary(df)
df <- transform(df,
sex = as.factor(sex)
)
df$disease <- factor(df$disease)
sapply(df, class)
set.seed(1234)
df_split <- df %>% initial_split(strata = state)
df1_train <- training(df_split)
df1_test <- testing(df_split)
rf_spec <- rand_forest(mode = "regression") %>%
set_engine("ranger")
lm_spec <- linear_reg() %>%
set_engine(engine = "lm")
rf_spec
lm_spec
rf_fit <- rf_spec %>%
fit(state ~ ., data = df1_train)
lm_fit <- lm_spec %>%
fit(state ~ ., data = df)
rf_fit <- rf_spec %>%
fit(state ~ ., data = df1_train)
